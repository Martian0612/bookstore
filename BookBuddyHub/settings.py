"""
Django settings for BookBuddyHub project.

Generated by 'django-admin startproject' using Django 4.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta
from rsa_key_handler import load_private_key
#####################
# import logging
#####################
# For importing or loading everythign from the .env file
load_dotenv()

# Setting the logger for Social login


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Loading the content or variables of the dotenv file or environment variables

# Logging configuration
# Create a custom logger for social authentication
# logger = logging.getLogger('social_auth')
# logger.setLevel(logging.DEBUG)

# # Create a console handler for the logger
# console_handler = logging.StreamHandler()
# console_handler.setLevel(logging.DEBUG)

# # Create a formatter and set it for the handler
# formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# console_handler.setFormatter(formatter)

# # Add the handler to the logger
# logger.addHandler(console_handler)

# # Update the Django logging configuration
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'loggers':{
#         'social_auth': {
#             'handlers':['console'],
#             'level':'DEBUG',
#             'propagate':False,
#         },
#     },
#     'handlers':{
#         'console':{
#             'class':'logging.StreamHandler',
#         },
#     },
# }

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers':{
#         'file':{
#             'level':'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename':'debug.log',
#         },
#     },
#     'loggers':{
#         'django':{
#             'handlers':['file'],
#             'level': 'DEBUG',
#             'propagate':True,
#         },
#         'social_auth': {
#             'handlers': ['file'],
#             'level':'DEBUG',
#             'propagate': True,
#         },
#     },
# }
#######################
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!^!a_#_sut1$(@cqnim@ygh#43na1i46&1b^51k9t!xia^vko2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    ############ by docs
    'oauth2_provider',
    'social_django',
    'drf_social_oauth2',
    'rest_framework_simplejwt',
    'books',
    
    # For google authentication

    # 'django.contrib.sites',
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    # 'allauth.socialaccount.providers.google',
    # 'dj_rest_auth'
]

# SITE_ID = 1

# Authentication Backend for google

AUTHENTICATION_BACKENDS = (
    # 'django.contrib.auth.backends.ModelBackend',
    # 'allauth.account.auth_backends.AuthenticationBackend',

    # Google OAuth2
    # Backend for handling oidc 
    'drf_social_oauth2.backends.GoogleIdentityBackend',# Google OAuth2 backend
    # drf-social-oauth2
    # Backend for handling oauth. 
    'drf_social_oauth2.backends.DjangoOAuth2', # DRF OAuth2 backend

    # Custom backend
    # 'books.auth_backends.CustomGoogleOAuth2',

    # Django
    'django.contrib.auth.backends.ModelBackend', # Deafault backend
)

SOCIAL_AUTH_PIPELINE = (

    # 1. Validate the signature.
    'social_core.pipeline.social_auth.validate_signature',

    # 2. Check if the user is allowed to authenticate. (It is useful in the case where you blocked or blacklisted the user and they are not allowed to authenticate.)
    'social_core.pipeline.social_auth.auth_allowed',

    # 3. Associate the social account with an existing user based on email.
    # It checks the emial exists or not.
    'social_core.pipeline.social_auth.associate_by_email',

    # Get username if email already exists or user already exist.
    # 4. Generate or get a username for the user.
    'social_core.pipeline.social_auth.get_user',

    # 5. Linking existing account with social account
    'social_core.pipeline.social_auth.associate_user',

    # Not useful right now.
    # 3. Assign the primary email to the user account.
    # 'social_core.pipeline.social_auth.assign_primary_email',

    # 6. Create a new user if needed.
    'social_core.pipeline.social_auth.create_user',

    # Creating custom user creation pipeline for checking the flow.
    # 'books.pipeline.debug_user_creation',

    # 7. Update user data (for consistency).
    'social_core.pipeline.social_auth.update_user',

    # Redundant for current use.
    # 8. Send a verification email .
    # 'social_core.pipeline.social_auth.send_verification_email',

    # 8. Clean up credentials (for security).
    'social_core.pipeline.social_auth.clean_credentials',
)

# Google Configuration
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('GOOGLE_CLIENT_ID')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['email', 'profile','openid']
SOCIAL_AUTH_GOOGLE_OAUTH2_REDIRECT_URI = 'http://localhost:8000/auth/complete/google-oauth2/'
# Scopes for allowing permissions during authentication from google
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
     'openid',
     'https://www.googleapis.com/auth/userinfo.email',
     'https://www.googleapis.com/auth/userinfo.profile'
     
]
# For specifying which social login you want to use
DRFSO2_PROPRIETARY_BACKEND_NAME = "Google"
# It will return jwt token (an access token and refresh token.)
ACTIVATE_JWT = True


# Loading private key by decrypting it
# Adding OIDC support
OAUTH2_PROVIDER = {
    "OIDC_ENABLED": True,
    "OIDC_RSA_PRIVATE_KEY": load_private_key(),
    "SCOPES":{
        "openid":"OpenID Connect scope",
        "profile":"User profile scope",
        "email": "User email scope",
    },

    # For logout
    "OIDC_RP_INITIATED_LOGOUT_ENABLED": True,
    "OIDC_RP_INITIATED_LOGOUT_ALWAYS_PROMPT":True,
    # Access token will be associated with email of the user.
     "USER_ID_FIELD": "email",

}
# Adding the social auth pipelines

# SOCIAL_AUTH_PIPELINE = (
#     # Check the existing mail
#     'social_core.pipeline.social_auth.associate_by_email',
#     # Attempts to associate the social accoutn with an existing user based on email or username.(or basically link with email of existing user.)
#     'social_core.pipeline.social_auth.associate_user',
#     'social_core.pipeline.social_auth.assign_primary_email',
#     # For security purposes, clean the credentials and other things.
#     'social_core.pipeline.social_auth.clean_credentials',
#     'social_core.pipeline.social_auth.create_user',
#     # For maintain consistency, it automatically update the user data.
#     'social_core.pipeline.social_auth.update_user',
#     'social_core.pipeline.social_auth.send_verfication_email',
#     'social_core.pipeline.social_auth.get_user_details',
#     'social_core.pipeline.social_auth.validate_signature',
# )

#####################

# LOGGING = {
#     'version' : 1,
#     'disable_existing_loggers' : False,
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers':{
#         # 'django':{
#         #     'handlers':['console'],
#         #     'level':'DEBUG',
#         # },
#         'social': {
#             # Enable logging for social-auth
#             'handlers': ['console'],
#             'level':'DEBUG',
#             'propagate':True,
#         },
#     },
# }
# Manually added code
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        
        'rest_framework_simplejwt.authentication.JWTAuthentication',

        # for google authentication
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'drf_social_oauth2.authentication.SocialAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
}

JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY', 'fallback_jwt_secret_key_if_not_set')
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME' : timedelta(minutes = 3),
    'REFRESH_TOKEN_LIFETIME' : timedelta(minutes = 6),
    # 'REFRESH_TOKEN_LIFETIME' : timedelta(days = 1),
    'ROTATE_REFRESH_TOKENS': False, # For indefinite login or extra security
    'BLACKLIST_AFTER_ROTATION': False,
    # 'ROTATE_REFRESH_TOKENS': True, # For indefinite login or extra security
    # 'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN':True,
    'ALGORITHM':  'HS256',
    'SIGNING_KEY' : JWT_SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES':('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM' : 'user_id',
    'AUTH_TOKEN_CLASSES':('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM':'token_type',
    'TOKEN_USER_ID_CLAIM':'user_id',
}

# MIDDLEWARE = [

    
#     'django.middleware.security.SecurityMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',

#     'books.middleware.TokenBlacklistMiddleware',

#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
#     # Middleware for token validation and extraction
#     'oauth2_provider.middleware.OAuth2TokenMiddleware',
#     # Middleware for handling exceptions caused during social login
#     'social_django.middleware.SocialAuthExceptionMiddleware',
    
# ]

MIDDLEWARE = [
   'django.middleware.security.SecurityMiddleware',
   'django.contrib.sessions.middleware.SessionMiddleware',
   'django.middleware.common.CommonMiddleware',
   'django.middleware.csrf.CsrfViewMiddleware',
   
   # Custom Token Blacklist Middleware (check before Django's Authentication)
   'books.middleware.TokenBlacklistMiddleware',

   'django.contrib.auth.middleware.AuthenticationMiddleware',
   'django.contrib.messages.middleware.MessageMiddleware',
   'django.middleware.clickjacking.XFrameOptionsMiddleware',

   # OAuth and Social Auth middlewares
   'oauth2_provider.middleware.OAuth2TokenMiddleware',
   'social_django.middleware.SocialAuthExceptionMiddleware',

]

ROOT_URLCONF = 'BookBuddyHub.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # Manually added code
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'BookBuddyHub.wsgi.application'

# Manually added code

# Caches settings 
CACHES = {
    'default':{
        'BACKEND':'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS':{
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}






# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# Replacing sqlite with postgresql
DATABASES = {
    'default':{
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME':'BookBuddyHub_db',
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': '127.0.0.1',
        'PORT': '5432' # Default PostgreSQL port
    }
}

# For storing data in json format.s
SOCIAL_AUTH_JSONFIELD_ENABLED = True

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
# Manually added code for managing (CSS, JAVASCRIPT OR IMAGE files)

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'STATIC')
# ]

# For managing media files

# URL to serve media files
MEDIA_URL = 'media/'

# Directory where media fiels will be stored
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email settings for Gmail SMTP

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com' # Gmail SMTP server
EMAIL_PORT = 465
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True # Use TLS encryption
EMAIL_USE_TLS = False # Use TLS encryption
EMAIL_USE_SSL = True
# EMAIL_USE_SSL = False
EMAIL_HOST_USER = 'blackabyss2709@gmail.com'
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

DEFAULT_FROM_EMAIL = 'BookBuddy Hub <muskankushwah1901@gmail.com>'